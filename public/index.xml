<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>OOAPEX</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on OOAPEX</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 15 Nov 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Project Title</title>
      <link>http://localhost:1313/projects/project-helloworld/</link>
      <pubDate>Fri, 15 Nov 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/project-helloworld/</guid>
      <description>&lt;p&gt;Hi&lt;/p&gt;</description>
    </item>
    <item>
      <title>博客搭建与迁移</title>
      <link>http://localhost:1313/posts/2024-11-12-%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E4%B8%8E%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Sun, 17 Dec 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2024-11-12-%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E4%B8%8E%E6%90%AD%E5%BB%BA/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;会将此前写的一些博客逐步的迁移到hugo上，包括自建的、Github Pages、wordpress等。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;2024-11-12：目前已经完成了wordpress的博客的迁移。&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>如何使用python处理excel文件？</title>
      <link>http://localhost:1313/posts/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8python%E5%A4%84%E7%90%86excel%E6%96%87%E4%BB%B6/</link>
      <pubDate>Tue, 21 Sep 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8python%E5%A4%84%E7%90%86excel%E6%96%87%E4%BB%B6/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.python-excel.org/&#34;&gt;Working with Excel Files in Python&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;1-哪些包可以优雅的处理-excel&#34;&gt;1 哪些包可以优雅的处理 excel？&lt;/h1&gt;&#xA;&lt;p&gt;在对 excel 进行一些操作时，可以使用 python 进行处理。常见的操作有增加、删除、修改等，经过一段时间的使用分析，确定比较好用的有以下几个，各有各的特点以及注意事项，以此记录。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;xlrd&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;xlwt&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;xlutils&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;openpyxl&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;pandas&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;下面一一介绍。&lt;/p&gt;&#xA;&lt;h1 id=&#34;2-xlrd--xlwt&#34;&gt;2 &lt;code&gt;xlrd&lt;/code&gt; &amp;amp; &lt;code&gt;xlwt&lt;/code&gt;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://xlrd.readthedocs.io/en/latest/&#34;&gt;xlrd - xlrd 2.0.1 documentation&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;最多处理 6 万多行&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;xlrd&lt;/code&gt; 主要用于读取 excel 文件，其主要针对于 &lt;code&gt;xls&lt;/code&gt; 格式的 excel 文件，但是实际使用过程中是可以读取 &lt;code&gt;xlsx&lt;/code&gt; 格式文件的。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;xlwt&lt;/code&gt; 主要用于写入 excel 文件，其只能将文件保存为 &lt;code&gt;xls&lt;/code&gt; 格式，而不能保存为 &lt;code&gt;xlsx&lt;/code&gt; 格式。这两个包都主要是针对于老版本（office 2003）的 excel处理。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;常见操作&lt;/strong&gt;以及示例代码如下：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# xlrd&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;workbook&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;xlrd&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;open_workbook&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;filepath&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;   &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 读取文件&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;sheets&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;workbook&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;sheet_names&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;           &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 读取excel文件中所有的表单名字&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;worksheet&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;workbook&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;sheet_by_name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;sheets&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;])&lt;/span&gt;   &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 使用第一个表单sheet&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 读取内容&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;worksheet&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;cell_value&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;row&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;col&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;  &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 读取第row行第col列的单元格的值，**注意，row和col是从0起的**&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;worksheet&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;row_values&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;row&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;      &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 取出第row+1行的数据&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;worksheet&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;col_values&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;row&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;      &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 取出第row+1行的数据&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# xlwt&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;workbook&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;xlwt&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Workbook&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;encoding&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;  &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 生成excel文件格式的对象&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;worksheet&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;workbook&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;add_sheet&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;result&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;      &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 在此对象内创建名字为result的sheet&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;worksheet&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;write&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;row&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;col&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;                &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 将value写入row行col列，**注意，row和col是从0起的**&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;3-xlutils&#34;&gt;3 xlutils&lt;/h1&gt;&#xA;&lt;p&gt;这个包是前面两个包的一个封装，包含了前面两个包所需的所有的依赖，能进行相应的操作。所以在使用时，可能会需要前面两个模块创建的对象，主要用来执行 copy 操作。执行完 copy 操作之后，将会获得原 excel 一样的内容和表格，结合 &lt;code&gt;xlwt&lt;/code&gt; 一起，可以实现对表格的修改。&lt;/p&gt;</description>
    </item>
    <item>
      <title>记一次pip使用ssl错误</title>
      <link>http://localhost:1313/posts/%E8%AE%B0%E4%B8%80%E6%AC%A1pip%E4%BD%BF%E7%94%A8ssl%E9%94%99%E8%AF%AF/</link>
      <pubDate>Fri, 10 Sep 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/%E8%AE%B0%E4%B8%80%E6%AC%A1pip%E4%BD%BF%E7%94%A8ssl%E9%94%99%E8%AF%AF/</guid>
      <description>&lt;h2 id=&#34;错误信息&#34;&gt;错误信息&lt;/h2&gt;&#xA;&lt;p&gt;WARNING: Retrying (Retry (total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by &amp;lsquo;SSLError (&amp;ldquo;Can&amp;rsquo;t connect to HTTPS URL because the SSL module is not available.&amp;rdquo;)&amp;rsquo;&lt;/p&gt;&#xA;&lt;h2 id=&#34;错误描述&#34;&gt;错误描述&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;windows 环境下&lt;/strong&gt;安装了&lt;strong&gt;minianaconda&lt;/strong&gt;，然后使用 pip 安装包出现 ssl 错误，原因不明，&lt;strong&gt;有可能是环境变量丢失造成的&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;分析原因&#34;&gt;分析原因&lt;/h2&gt;&#xA;&lt;p&gt;Dll 文件缺失惹的祸&lt;/p&gt;&#xA;&lt;h2 id=&#34;解决办法&#34;&gt;解决办法&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;将  &lt;span style=&#34;color:#4e9a06&#34;&gt;`&lt;/span&gt;/minianaconda/Library/bin&lt;span style=&#34;color:#4e9a06&#34;&gt;`&lt;/span&gt; 目录下的&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    libcrypto-1_1-x64.dll&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    libcrypto-1_1-x64.pdb&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    libssl-1_1-x64.dll&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    libssl-1_1-x64.pdb&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;四个文件复制到 &lt;span style=&#34;color:#4e9a06&#34;&gt;`&lt;/span&gt;minianaconda/DLLs&lt;span style=&#34;color:#4e9a06&#34;&gt;`&lt;/span&gt;目录下&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;完工&lt;/p&gt;</description>
    </item>
    <item>
      <title>阿里云云效devops免费啦</title>
      <link>http://localhost:1313/posts/%E9%98%BF%E9%87%8C%E4%BA%91%E4%BA%91%E6%95%88devops%E5%85%8D%E8%B4%B9%E5%95%A6/</link>
      <pubDate>Fri, 10 Sep 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/%E9%98%BF%E9%87%8C%E4%BA%91%E4%BA%91%E6%95%88devops%E5%85%8D%E8%B4%B9%E5%95%A6/</guid>
      <description>&lt;h1 id=&#34;阿里云云效-devops-免费啦&#34;&gt;阿里云云效 devops 免费啦&lt;/h1&gt;&#xA;&lt;h2 id=&#34;云效地址&#34;&gt;云效地址&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://devops.aliyun.com/?taskCode=yunxiao08&amp;amp;recordId=895245&amp;amp;userCode=c9qckqd2&#34;&gt;https://devops.aliyun.com/?taskCode=yunxiao08&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;官方优惠&#34;&gt;官方优惠&lt;/h2&gt;&#xA;&lt;p&gt;阿里云云效是云原生时代的新 DevOps 平台，包含“项目协作”“知识库”“ 代码管理”“测试管理”“流水线” “制品仓库”6 大核心产品。我们诚邀您前来体验。注册云效，完成新手任务后，产品内即可直接领取。&lt;/p&gt;&#xA;&lt;h3 id=&#34;云效代码管理库数量容量不限&#34;&gt;云效代码管理库数量/容量不限&lt;/h3&gt;&#xA;&lt;p&gt;提供代码托管、智能评审、质量检测等功能，提供删库保护、外包管控等高级功能，实现安全、稳定、高效的研发生产。&lt;/p&gt;&#xA;&lt;h3 id=&#34;云效流水线时长-5400-分钟月&#34;&gt;云效流水线时长 5400 分钟/月&lt;/h3&gt;&#xA;&lt;p&gt;运行时长 5400 分钟/月，最大并发任务数 6。提供灵活易用的持续集成、持续验证、持续发布功能，帮助企业高质量、高效率的交付业务。&lt;/p&gt;&#xA;&lt;h3 id=&#34;云效制品仓库容量不限&#34;&gt;云效制品仓库容量不限&lt;/h3&gt;&#xA;&lt;p&gt;提供基于 Maven、Gradle、NPM 等软件包管理工具的企业级私有仓库服务，用于管理企业级依赖托管。&lt;/p&gt;&#xA;&lt;h2 id=&#34;目前产品&#34;&gt;目前产品&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;知识库&lt;/li&gt;&#xA;&lt;li&gt;制品仓库&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;代码管理&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;测试管理&lt;/li&gt;&#xA;&lt;li&gt;流水线&lt;/li&gt;&#xA;&lt;li&gt;效能洞察&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;云端开发&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;云端开发-devstudio&#34;&gt;云端开发-devStudio&lt;/h3&gt;&#xA;&lt;p&gt;这其实是整个云效的最后一个功能，但是我觉得这是&lt;strong&gt;最香&lt;/strong&gt;的功能，目前使用是完全免费的，可以有 5 个免费的仓库，完全足够了呀。&#xA;云端开发就是一个云端的 IDE，功能与目前 GitHub 的 &lt;code&gt;codespace&lt;/code&gt;，或者 gitlab 等都是类似的，但是由于这些服务都是国外的，我们在使用的过程中，难免遇到网络问题，而且，除了没有公测的 &lt;code&gt;codespace&lt;/code&gt;，市面上的大多数此种云端 IDE 软件，要么&lt;strong&gt;收费&lt;/strong&gt;，要么&lt;strong&gt;代码没有提示&lt;/strong&gt;，写起代码来真实受罪。&#xA;整个在线 IDE 其实是基于 vscode 的，界面啊和使用的过程与 vscode 没有两样，所以，从 vscode 开发迁移到这个在线 IDE 上，真的很不错。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;什么？为啥要在线开发？&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;全流程在线完成，网速好，效率高，再也不会遇到 push 不上去，clone 不下来的窘境&lt;/li&gt;&#xA;&lt;li&gt;代码提示真的香&lt;/li&gt;&#xA;&lt;li&gt;代码在终端运行发布后有在线链接，前端全网可见，再也不用把项目部署到服务器别人才能看到效果了。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;知识库&#34;&gt;知识库&lt;/h3&gt;&#xA;&lt;p&gt;知识库其实也就是文档管理，是面向企业用户的。博主试用了一下，发现他的 markdown 编辑器还是真的挺好用的，优雅的动画，舒服的目录，以及优雅的团队协作方式，让团队之间写文档变得没有那么冗余和难受。&#xA;&lt;img src=&#34;https://image.ooapex.com/images/20210910155705.png&#34; alt=&#34;知识库类型&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image.ooapex.com/images/20210910160210.png&#34; alt=&#34;write&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux下将进程放到后台运行</title>
      <link>http://localhost:1313/posts/linux%E4%B8%8B%E5%B0%86%E8%BF%9B%E7%A8%8B%E6%94%BE%E5%88%B0%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C/</link>
      <pubDate>Mon, 30 Aug 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/linux%E4%B8%8B%E5%B0%86%E8%BF%9B%E7%A8%8B%E6%94%BE%E5%88%B0%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C/</guid>
      <description>&lt;h1 id=&#34;linux-下将进程放到后台运行&#34;&gt;Linux 下将进程放到后台运行&lt;/h1&gt;&#xA;&lt;p&gt;要想让一个程序在后台运行，有两种主要的方法:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;使用 &lt;code&gt;&amp;amp;&lt;/code&gt; 搭配 &lt;code&gt;nohup&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;使用 screen 命令&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;-搭配-nohup-让程序在后台运行&#34;&gt;&lt;code&gt;&amp;amp;&lt;/code&gt; 搭配 &lt;code&gt;nohup&lt;/code&gt; 让程序在后台运行&lt;/h2&gt;&#xA;&lt;h3 id=&#34;切换成后台&#34;&gt;切换成后台&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nohup xxx.sh &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;&amp;amp;&lt;/code&gt; 的作用是将程序由前台切换到后台，且没有了标准输入输出流。一般在脚本的后面加上 &lt;code&gt;&amp;amp;&lt;/code&gt; 就能够将其切换成后台程序。&lt;/p&gt;&#xA;&lt;p&gt;但是，此时的后台程序属于当前 shell 的一个子进程，也就是意味着当前连接的 shell 一旦关闭，就会将这个后台进程也关闭。&lt;/p&gt;&#xA;&lt;p&gt;因此，需要使用 &lt;code&gt;nohup&lt;/code&gt; 将这个进程从当前的 shell 中脱离出来，将此后台进程的进程号切换为 ppid 切换为 1，也就是父进程不再是当前的 shell 了。&lt;/p&gt;&#xA;&lt;p&gt;这样，就算关闭当前的 shell 也不会关闭当前进程。&lt;/p&gt;&#xA;&lt;h3 id=&#34;查看后台进程&#34;&gt;查看后台进程&lt;/h3&gt;&#xA;&lt;p&gt;当 shell 没有关闭时，可以使用 &lt;code&gt;jobs -l&lt;/code&gt; 查看当前的后台进程。&lt;/p&gt;&#xA;&lt;p&gt;当 shell 已经关闭了一次，有重新开了一个时，使用以上命令已经不能查看后台进程了，所以需要用 &lt;code&gt;ps -ef | grep processName&lt;/code&gt; 来查看进程。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;在我实际的使用过程中，我发现即使我使用了 &lt;code&gt;nohup&lt;/code&gt;，和 &lt;code&gt;&amp;amp;&lt;/code&gt;，还是无法保证当前 shell 关闭后程序继续运行，因此我采用下面 screen 的方法&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;screen-保证程序在后台运行&#34;&gt;Screen 保证程序在后台运行&lt;/h2&gt;&#xA;&lt;h3 id=&#34;安装&#34;&gt;安装&lt;/h3&gt;&#xA;&lt;p&gt;一般系统不自带 screen，因此需要自己安装。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ubuntu/debian: sudo apt-get install screen&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;centos: yum install screen&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;常用命令&#34;&gt;常用命令&lt;/h3&gt;&#xA;&lt;p&gt;熟练的掌握以下命令，基本的常见就够用了。&lt;/p&gt;</description>
    </item>
    <item>
      <title>重学Git-Git使用SSH方法连接GitHub</title>
      <link>http://localhost:1313/posts/%E9%87%8D%E5%AD%A6git-git%E4%BD%BF%E7%94%A8ssh%E6%96%B9%E6%B3%95%E8%BF%9E%E6%8E%A5github/</link>
      <pubDate>Mon, 30 Aug 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/%E9%87%8D%E5%AD%A6git-git%E4%BD%BF%E7%94%A8ssh%E6%96%B9%E6%B3%95%E8%BF%9E%E6%8E%A5github/</guid>
      <description>&lt;h1 id=&#34;git-使用-ssh-方法连接-github&#34;&gt;Git 使用 SSH 方法连接 GitHub&lt;/h1&gt;&#xA;&lt;h2 id=&#34;什么是-ssh&#34;&gt;什么是 SSH&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;SSH 是一个加密远程连接方式，可以用来认证客户端与 GitHub 之间的连接。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;检查现有-ssh-密钥&#34;&gt;检查现有 SSH 密钥&lt;/h2&gt;&#xA;&lt;p&gt;如果以前在使用本地 git 的时候生成过 github 密钥，那么可以在本地看得到&#xA;首先打开 Git Bash, 查看现有是否存在 SSH 密钥。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ls -al ~/.ssh&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;检查目录列表以查看是否已经有 SSH 公钥。默认情况下，公钥的文件名是以下之一。&#xA;如果有的话，可以跳转到第三步，否则进行第二步。&lt;/p&gt;&#xA;&lt;h2 id=&#34;生成新的-ssh-密钥&#34;&gt;生成新的 SSH 密钥&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;打开 Git Bash&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;粘贴以下文本&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; ssh-keygen -t ed25519 -C &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;your_email@example.com&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 或者，如果你的系统不支持以上的算法&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; ssh-keygen -t rsa -b &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;4096&lt;/span&gt; -C &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;your_email@example.com&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;注意要替换掉上面的电子邮件为 github 想要认证的电子邮件账号&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;后面一直回车就行了，当然按照提示输入一些也没错。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;然后就会提示你在对应的位置生成了 SSH 私钥和公钥。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;如果你是 windows 系统，一般会在 &lt;code&gt;c:/windows/user&lt;/code&gt; 目录下面。如果是 linux 等系统，一般也能在对应的位置找到，留意命令行的生成信息就行。&lt;/p&gt;&#xA;&lt;h2 id=&#34;将公钥粘贴到-github&#34;&gt;将公钥粘贴到 GitHub&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;点击头像，打开 &lt;code&gt;setting&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>重学Git-Git分支管理</title>
      <link>http://localhost:1313/posts/%E9%87%8D%E5%AD%A6git-git%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/</link>
      <pubDate>Mon, 30 Aug 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/%E9%87%8D%E5%AD%A6git-git%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/</guid>
      <description>&lt;h1 id=&#34;分支管理&#34;&gt;分支管理&lt;/h1&gt;&#xA;&lt;p&gt;分支管理的意义是保证有一个分支是一直可以正确使用的，当有新的特性或要修改 Bug 的时候，就创建新的分支，修改好了以后就合并到主分支，保证整个项目的正确运行和访问。&lt;/p&gt;&#xA;&lt;p&gt;主要分为了两个部分&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;本地分支管理&lt;/li&gt;&#xA;&lt;li&gt;远程分支管理&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;本地分支管理-增删改查&#34;&gt;本地分支管理-增删改查&lt;/h1&gt;&#xA;&lt;p&gt;本地管理可以新建，修改等操作，但是这些操作都是仅仅在本地，只要不提交到远程仓库，就不会有任何影响。&lt;/p&gt;&#xA;&lt;h2 id=&#34;创建新的分支&#34;&gt;创建新的分支&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git branch -c newBranch # 仅仅创建新分支&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git switch -c newBranch # 创建并切换到新分支&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git checkout -b newBranch # 创建并切换到新分支&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;切换到新的分支&#34;&gt;切换到新的分支&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git switch &amp;lt;newBranchName&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对分支内容进行修改后，就可以提交到本地分支库。可以使用&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git add .&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git commit -m &amp;#34;modify&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;合并分支&#34;&gt;合并分支&lt;/h2&gt;&#xA;&lt;p&gt;将指定分支的内容合并到当前分支&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git merge &amp;lt;branchName&amp;gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;删除分支&#34;&gt;删除分支&lt;/h2&gt;&#xA;&lt;p&gt;比如说在 dev 分支修改了新的内容，然后切换会主分支，合并以后，就可以删除 dev 分支了。使用以下命令&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git branch -d &amp;lt;branchName&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;本地分支管理-冲突解决&#34;&gt;本地分支管理-冲突解决&lt;/h1&gt;&#xA;&lt;p&gt;如果在 git 进行合并的时候，出现了冲突，那么是因为两个分支都有了新的提交。比如说主分支提交了新的内容，切换到 dev 分支，也提交了新的内容，在切换回主分支进行合并的话，就会出现冲突。&lt;/p&gt;&#xA;&lt;p&gt;一般都是手动的修改造成冲突的地方，然后再提交，就会有一个新的 commit&lt;/p&gt;&#xA;&lt;h1 id=&#34;远程仓库分支管理&#34;&gt;远程仓库分支管理&lt;/h1&gt;&#xA;&lt;h2 id=&#34;创建远程分支&#34;&gt;创建远程分支&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git push origin oldbranch:&amp;lt;newBranchName&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;建立与远程仓库某分支的链接&#34;&gt;建立与远程仓库某分支的链接&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git checkout -b branch-name origin/branch-name&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;将修改提交到分支&#34;&gt;将修改提交到分支&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git push origin &amp;lt;branch-name&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;删除远程分支&#34;&gt;删除远程分支&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git push origin :&amp;lt;branchName&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>重学Git-Git提交修改到远程仓库</title>
      <link>http://localhost:1313/posts/%E9%87%8D%E5%AD%A6git-git%E6%8F%90%E4%BA%A4%E4%BF%AE%E6%94%B9%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</link>
      <pubDate>Mon, 30 Aug 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/%E9%87%8D%E5%AD%A6git-git%E6%8F%90%E4%BA%A4%E4%BF%AE%E6%94%B9%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</guid>
      <description>&lt;h1 id=&#34;提交修改到仓库&#34;&gt;提交修改到仓库&lt;/h1&gt;&#xA;&lt;p&gt;使用 &lt;code&gt;git push&lt;/code&gt; 命令, 将已经 &lt;code&gt;commit&lt;/code&gt; 的修改提交到远程仓库，本命令有两个参数：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;远程链接名, 也就是通过 &lt;code&gt;remote add&lt;/code&gt; 添加的远程仓库名字如 &lt;code&gt;origin&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;仓库的分支名，如 &lt;code&gt;main&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;连在一起就是:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git push origin main&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;重命名远程分支&#34;&gt;重命名远程分支&lt;/h1&gt;&#xA;&lt;p&gt;分为三步，第一步是先删除远程的分支，第二步是重命名本地的分支名字，第三步将重命名的分支提交到远程仓库，&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;删除远程分支&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git branch -r # 产看远程分支名&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# 删除远程分支&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git push origin :remoteBranchName  #删除远程分支,方法1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git push --delete origin :remoteBranchName #方法2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;重命名本地分支&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git branch -l # 查看本地分支名&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# 将本地的branchName重命名为新的newBranchName&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git branch -m branchName newBranchName&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;提交命名的修改&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git push origin newBranchName&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;通过以上的命令就可以创建新的分支。那么将修改提交到新的分支就只要用 &lt;code&gt;push&lt;/code&gt; 命令就行了。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git push origin newBranchName&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样就只会提交到新的指定的分支，而不会提交到旧的分支&lt;/p&gt;</description>
    </item>
    <item>
      <title>重学Git-Git标签管理</title>
      <link>http://localhost:1313/posts/%E9%87%8D%E5%AD%A6git-git%E6%A0%87%E7%AD%BE%E7%AE%A1%E7%90%86/</link>
      <pubDate>Mon, 30 Aug 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/%E9%87%8D%E5%AD%A6git-git%E6%A0%87%E7%AD%BE%E7%AE%A1%E7%90%86/</guid>
      <description>&lt;p&gt;每个标签都是跟随着每个 commit 的，commit 后可以给本次提交打上标签。&lt;/p&gt;&#xA;&lt;h1 id=&#34;本地操作&#34;&gt;本地操作&lt;/h1&gt;&#xA;&lt;h2 id=&#34;创建标签&#34;&gt;创建标签&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git tag &amp;lt;tagname&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;删除标签&#34;&gt;删除标签&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git tag -d &amp;lt;tagname&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;查看标签&#34;&gt;查看标签&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git show &amp;lt;tagname&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;给指定-commit-打标签&#34;&gt;给指定 commit 打标签&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git tag &amp;lt;tagname&amp;gt; &amp;lt;commitID&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;远程操作&#34;&gt;远程操作&lt;/h1&gt;&#xA;&lt;h2 id=&#34;提交到远程&#34;&gt;提交到远程&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git push origin &amp;lt;tagname&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git push origin --tags # 提交所有标签&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;远程删除&#34;&gt;远程删除&lt;/h2&gt;&#xA;&lt;p&gt;先本地删除，再远程删除&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git push origin :refs/tags/&amp;lt;tagname&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>重学Git-Git版本管理</title>
      <link>http://localhost:1313/posts/%E9%87%8D%E5%AD%A6git-git%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/</link>
      <pubDate>Mon, 30 Aug 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/%E9%87%8D%E5%AD%A6git-git%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/</guid>
      <description>&lt;h1 id=&#34;版本回退&#34;&gt;版本回退&lt;/h1&gt;&#xA;&lt;p&gt;当前版本不满足要求，可以使用以下命令进行版本回退&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git reset --hard HEAD&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;HEAD&lt;/code&gt; 就是一个指针，指向整个提交链条的最新的 commit，而上述操作就是将指针往回指一个，实现版本的回退。&#xA;执行以上命令后，虽然回到了上一个版本，但是最新的版本，在 git log 上是看不到的。也就意味着最新的版本是丢失的，那怎么办呢？&#xA;两个办法，找到控制台等地方上次提交的 &lt;code&gt;commit id&lt;/code&gt;，如 &lt;code&gt;90a1&lt;/code&gt;，然后依旧使用上述命令，就可以回到最新的版本。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git reset --hard 90a1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者首先使用&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git reflog&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;查看每一个命令的记录，然后执行上面的命令&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git reset --hard 90a1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;</description>
    </item>
    <item>
      <title>重学Git-Git使用HTTP认证方法连接GitHub</title>
      <link>http://localhost:1313/posts/%E9%87%8D%E5%AD%A6git-git%E4%BD%BF%E7%94%A8http%E8%AE%A4%E8%AF%81%E6%96%B9%E6%B3%95%E8%BF%9E%E6%8E%A5github/</link>
      <pubDate>Tue, 24 Aug 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/%E9%87%8D%E5%AD%A6git-git%E4%BD%BF%E7%94%A8http%E8%AE%A4%E8%AF%81%E6%96%B9%E6%B3%95%E8%BF%9E%E6%8E%A5github/</guid>
      <description>&lt;h1 id=&#34;git-配置&#34;&gt;Git 配置&lt;/h1&gt;&#xA;&lt;p&gt;当下载完 Git，安装好以后，需要对 git 进行一个基本的配置。才能完成跟 GitHub 的交互。&lt;/p&gt;&#xA;&lt;h2 id=&#34;新建一个仓库&#34;&gt;新建一个仓库&lt;/h2&gt;&#xA;&lt;p&gt;去 GitHub 新建一个仓库，如 &lt;a href=&#34;https://github.com/Jeffrey-D/HelloWorld.git&#34;&gt;HelloWorld&lt;/a&gt;&#xA;然后复制仓库的链接，到安装好 Git 客户端的命令行执行 &lt;code&gt;clone&lt;/code&gt; 命令。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone https://github.com/Jeffrey-D/HelloWorld.git&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;config-基本配置&#34;&gt;Config 基本配置&lt;/h2&gt;&#xA;&lt;p&gt;进入此项目，执行以下命令，并做一些基本的配置&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;cd&lt;/span&gt; HelloWorld  &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 进入项目目录&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 个人信息配置&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git config --global user.name &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;ishland&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git config --global user.email &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;example@example.com&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面配置了提交的用户名和邮箱。&lt;strong&gt;注意，个人邮箱要与 GitHub 个人信息界面的邮箱列表中的邮箱一致&lt;/strong&gt;，然后对项目做一些修改，比如修改 &lt;a href=&#34;../README.md&#34;&gt;README&lt;/a&gt; 等等。输入以下命令提交修改。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git add . &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 将修改做一次stage，也就是记录&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 对上面的add做一次提交，也就是一次快照，使用-m 指定本次的提交说明信息&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 此时只是给你的修改&amp;#34;拍了照片&amp;#34;，只是记录了下来，并没有提交你的GitHub仓库上。&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git commit -m &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;update readme&amp;#34;&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 提交到远程仓库，直接使用git push&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git push&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面可以直接使用 git push 的原因是这是 clone 的项目，在项目的根目录下已经存放好了一个隐藏文件，内包含了项目的信息，所以使用 git push 会直接提交 clone 时的默认的分支，也就是 main。&lt;/p&gt;</description>
    </item>
    <item>
      <title>重学Git-Git远程仓库管理</title>
      <link>http://localhost:1313/posts/%E9%87%8D%E5%AD%A6git-git%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%AE%A1%E7%90%86/</link>
      <pubDate>Tue, 24 Aug 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/%E9%87%8D%E5%AD%A6git-git%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%AE%A1%E7%90%86/</guid>
      <description>&lt;h1 id=&#34;远程仓库&#34;&gt;远程仓库&lt;/h1&gt;&#xA;&lt;p&gt;远程仓库就是存储项目代码文件的地方，由于认证方式的不同，远程仓库的链接可以分为两种：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;HTTPS 链接： &lt;a href=&#34;https://github.com/user/repo.git&#34;&gt;https://github.com/user/repo.git&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;SSH 链接： &lt;a href=&#34;mailto:git@github.com&#34;&gt;git@github.com&lt;/a&gt; : user/repo. Git&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;给远程仓库链接起名字&#34;&gt;给远程仓库（链接）起名字&lt;/h1&gt;&#xA;&lt;p&gt;再 Git 的实际使用过程中，如果每次提交给远程仓库都使用链接的话，那会显得很长，且当有多个仓库在管理时，就会显得很麻烦。所以 Git 提供了一个给远程仓库重新起个简单的名字的操作，也叫做&lt;strong&gt;创建远程仓库&lt;/strong&gt;，其实就是将本地的某个名字与远程的某个仓库对应起来。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git remote add origin &amp;lt;REMOTE_URL&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中 &lt;code&gt;git remote add&lt;/code&gt; 是标准命令，后面的 &lt;code&gt;origin&lt;/code&gt; 指的是远程仓库的名字，随便指定，&lt;code&gt;&amp;lt;REMOTE_URL&amp;gt;&lt;/code&gt; 指的是远程的链接。&lt;/p&gt;&#xA;&lt;h2 id=&#34;远程仓库名字修改&#34;&gt;远程仓库名字修改&lt;/h2&gt;&#xA;&lt;p&gt;正常情况下，&lt;code&gt;git push&lt;/code&gt; 会有两个参数，分别是远程连接名和分支名。如 &lt;code&gt;git push origin main&lt;/code&gt;, 意思就是将修改提交到远程连接名为 origin 的 main 分支。&lt;/p&gt;&#xA;&lt;p&gt;Origin 是给某个远程仓库的链接指定一个名字，可以使用命令行修改远程连接的名字&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git remote -v&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# 查看现有远程&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; origin  https://github.com/OWNER/REPOSITORY.git (fetch)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; origin  https://github.com/OWNER/REPOSITORY.git (push)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git remote rename origin destination&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# 将远程名称从 &amp;#39;origin&amp;#39; 更改为 &amp;#39;destination&amp;#39;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git remote -v&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# 验证远程的新名称&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; destination  https://github.com/OWNER/REPOSITORY.git (fetch)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; destination  https://github.com/OWNER/REPOSITORY.git (push)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;名字所对应的链接修改&#34;&gt;名字所对应的链接修改&lt;/h2&gt;&#xA;&lt;p&gt;Origin 所指定的远程链接也可以修改&lt;/p&gt;</description>
    </item>
    <item>
      <title>如何用wordpress做一个舒心的博客-配置指南</title>
      <link>http://localhost:1313/posts/%E5%A6%82%E4%BD%95%E7%94%A8wordpress%E5%81%9A%E4%B8%80%E4%B8%AA%E8%88%92%E5%BF%83%E7%9A%84%E5%8D%9A%E5%AE%A2-%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/</link>
      <pubDate>Thu, 19 Aug 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/%E5%A6%82%E4%BD%95%E7%94%A8wordpress%E5%81%9A%E4%B8%80%E4%B8%AA%E8%88%92%E5%BF%83%E7%9A%84%E5%8D%9A%E5%AE%A2-%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;既然决定了写博客，那么拥有一个好看的、好用的前台页面，一个舒服的书写平台，至关重要。🙂&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;&#xA;&lt;p&gt;平常总喜欢做学习笔记，也喜欢开许多的新坑，但是都没有坚持下来，所以，决定建立一个自己的博客，培养自己阅读和写作的习惯。也就有了&lt;a href=&#34;https://loli.fluduan.xyz&#34;&gt;本博客&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;p&gt;下面将介绍本 Wordpress 博客的一些前端和后端的配置，给各位现在的站长，和将来的优秀站长一些参考，也作为自己的一个记录。包括以下内容：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;主题&lt;/li&gt;&#xA;&lt;li&gt;插件&#xA;&lt;ul&gt;&#xA;&lt;li&gt;备份插件&lt;/li&gt;&#xA;&lt;li&gt;写作插件&lt;/li&gt;&#xA;&lt;li&gt;统计插件&lt;/li&gt;&#xA;&lt;li&gt;评论插件&lt;/li&gt;&#xA;&lt;li&gt;链接插件&lt;/li&gt;&#xA;&lt;li&gt;订阅插件&lt;/li&gt;&#xA;&lt;li&gt;SSL 插件&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;SEO 优化&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;主题-corepress&#34;&gt;主题-Corepress&lt;/h1&gt;&#xA;&lt;p&gt;Corepress 是某位大佬开发的一款适合极客的主题，体积小，有好看的小工具、自带 SEO 等优秀的特点，使用体验很不错。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image.ooapex.com/images/20210818202355.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;更多的详细信息，下载和安装都可以去&lt;a href=&#34;https://www.lovestu.com/corepress.html&#34;&gt;官网&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;插件&#34;&gt;插件&lt;/h1&gt;&#xA;&lt;p&gt;插件是一个 wordpress 是否好用的灵魂，自建立以来，我因为各种各样的需求倒腾过许多的插件，前前后后删删减减的，也找到了一批自己用得舒心的插件。主要涵盖了博客的写作、备份、统计、评论、外链、订阅等插件。&lt;/p&gt;&#xA;&lt;h2 id=&#34;写作插件-wp-githuber-md&#34;&gt;写作插件-&lt;strong&gt;WP Githuber MD&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;作为一个代码工作者，用得最舒心的写作语言当然就是 markdown 了。所以，倒腾一个舒服的 markdown 写作插件十分的重要。在几个 markdown 插件中试用了许久，最终选定了&lt;strong&gt;WP Githuber MD&lt;/strong&gt;, 这款几乎可以说是全能的 markdown 写作插件。它有以下的几个优点：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;支持随开随关，不想用可在编辑器页面关闭，使用其他编辑器&lt;/li&gt;&#xA;&lt;li&gt;支持双屏即时预览，写作排版效果一目了然&lt;/li&gt;&#xA;&lt;li&gt;支持切换风格，切换工具栏&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;当然，作为一个科研人员，想要写一些包含数学公式的博客时，wordpress 的编辑器就成了噩梦。几乎所有的 wordpress 中的 markdown 编辑器插件，都不支持使用数学公式，这款也就并不例外。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image.ooapex.com/images/20210818203650.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;备份插件-wpvivid-backup&#34;&gt;备份插件-WPvivid Backup&lt;/h2&gt;&#xA;&lt;p&gt;建立这个博客，那必然避免不了使用服务器搭建（参考 &lt;a href=&#34;http://82.157.75.233:8000/wordpress%e5%8d%9a%e5%ae%a2%e6%90%ad%e5%bb%ba/&#34;&gt;WordPress博客搭建&lt;/a&gt;）。既然是租用别人的服务器（&lt;del&gt;我自己肯定没有啊&lt;/del&gt;），那但凡哪一天主机商跑路，或者放我的博客的主机烧了被水淹了，那我的数据不就没了嘛，那损失就大了。于是就会想着要将自己的博客数据定期整体备份，备份到哪里呢，当然是更安全的其他云服务商了，如 Google Drive，Dropbox, onedrive 等。这些云服务商，尤其是云存储服务商，数据都是会进行多地冗余备份的，所以，数据的安全性会更好。&lt;/p&gt;&#xA;&lt;p&gt;要找到一款满意的备份插件，需要满足以下几个条件：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;支持备份到各大云存储服务商，简单方便&lt;/li&gt;&#xA;&lt;li&gt;支持本地备份，本次也要存一份&lt;/li&gt;&#xA;&lt;li&gt;支持自动备份，不用每次都自己手动操作，简单方便&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;于是还真给我找到了，就是&lt;strong&gt;WPvivid Backup&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image.ooapex.com/images/20210818205036.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;支持自己手动备份，也支持自己设置时间自动备份，可以备份到本地，也可以经过简单的认证，将自己的数据和文件备份到想要的云服务商，甚至可以多端备份，当然，这款备份软件的高级功能是需要付费的，免费版本只能保存三个备份记录，当然，我觉得够用啦。&lt;/p&gt;&#xA;&lt;h2 id=&#34;统计插件-wp-postviews&#34;&gt;统计插件-&lt;strong&gt;WP-PostViews&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Corepress 有一个好处，就是在主页会显示每篇文章的评论总数，但是却没有集成浏览总数的显示。WP-PostViews 可以满足这个需求，它具有以下特点:&lt;/p&gt;</description>
    </item>
    <item>
      <title>卷积神经网络(CNN)-彩色图像的卷积计算</title>
      <link>http://localhost:1313/posts/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9Ccnn-%E5%BD%A9%E8%89%B2%E5%9B%BE%E5%83%8F%E7%9A%84%E5%8D%B7%E7%A7%AF%E8%AE%A1%E7%AE%97/</link>
      <pubDate>Tue, 17 Aug 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9Ccnn-%E5%BD%A9%E8%89%B2%E5%9B%BE%E5%83%8F%E7%9A%84%E5%8D%B7%E7%A7%AF%E8%AE%A1%E7%AE%97/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;相关链接&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://82.157.75.233:8000/jhsjtlcnnsmsjhzs/&#34;&gt;001-卷积神经网络(CNN)-什么是卷积运算&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;卷积为什么有效&#34;&gt;卷积为什么有效？&lt;/h1&gt;&#xA;&lt;p&gt;前面说到在利用基本的神经网络做计算时，会出现参数爆炸的现象，一张 &lt;code&gt;1000*1000*3&lt;/code&gt; 的图像，在包含 1000 个隐层的情况下，会有 3 亿个参数需要训练，这无疑是一个很大的问题。那么卷积运算就出现了，因为它的参数真的很少，且很固定。&lt;/p&gt;&#xA;&lt;p&gt;普通的神经网络计算，权值矩阵 (&lt;strong&gt;w&lt;/strong&gt;) 中的参数的个数是随着输入矩阵的增加而增加的。而在卷积计算中，引入了过滤矩阵（或卷积核），卷积核中的参数的个数，是我们要利用神经网络训练的参数的个数。比如有一个 &lt;code&gt;6*6&lt;/code&gt; 的卷积核，那么在本次卷积中，需要确定的参数的个数也就是 36 个。无论是多大的图片，无论图片的大小怎么改变，最终需要确定的只有 36 个参数，这也是神经网络中的一个重要的思想-&lt;strong&gt;参数共享&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;h1 id=&#34;彩色-rgb-图像如何进行卷积计算&#34;&gt;彩色 (RGB) 图像如何进行卷积计算&lt;/h1&gt;&#xA;&lt;p&gt;前面进行卷积运算时，我们讨论的都是一个简单的二维矩阵，可以认为它是只含有一个通道的图像（黑白图像等），那么彩色图像的卷积应该怎么计算呢？&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;一个 &lt;code&gt;6*6*3&lt;/code&gt; 的图像，那么为了进行卷积运算，其卷积核也应该是具有三个通道 (&lt;strong&gt;channel&lt;/strong&gt;) 的。这样才能保证计算&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image.ooapex.com/images/20210806142719.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;ol start=&#34;2&#34;&gt;&#xA;&lt;li&gt;计算方法与二维的类似，&lt;strong&gt;输入矩阵与过滤矩阵每一层的对应位置的数相乘并相加，最终得到一个数字，也就是做了三次的二维的运算，最终将结果相加起来得到最终的结果&lt;/strong&gt;。&lt;/li&gt;&#xA;&lt;li&gt;最终输出的结果矩阵，因为只有一个过滤矩阵，所以最终的结果矩阵一定是一个一维的&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;一定要保证过滤矩阵的通道个数与输入图像的通道个数是相同的，否则无法正确的进行卷积运算。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h1 id=&#34;卷积神经网络中的卷积层是什么&#34;&gt;卷积神经网络中的卷积层是什么？&lt;/h1&gt;&#xA;&lt;p&gt;上面就是基本的卷积计算的运算法则，总结下来一句话：&lt;strong&gt;对应位置相乘并相加，算完移位，继续卷积&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;那根据卷积计算，就可以构造单层卷积网络了，卷积网络与上图的不同是，它是由多个过滤层构成的。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image.ooapex.com/images/20210806145933.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;过滤器的作用就是利用不同的卷积核，来提取图像中的某些特征，如&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;1&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;0&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;-1&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;-1&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;-1&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;就可以用来提取图像中的垂直边界或垂直特征。对图像利用多个过滤器进行卷积运算，将最终的结果组合到一起组成一个新的多维度矩阵，这就是卷积神经网络中的一次卷积运算。&lt;/p&gt;&#xA;&lt;p&gt;上图中的 6 x 6 x 3 的输入矩阵，分别经过两个 Fliter 进行卷积运算之后，得到两个 4 x 4 x 1 的矩阵，将这两个矩阵组合到一起，也就是最终的 4 x 4 x 2 的输出矩阵，这将作为整个网络下一步操作的输入（卷积，池化等）&lt;/p&gt;&#xA;&lt;p&gt;基本上到这里就能看懂许多文献上的卷积层了&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image.ooapex.com/images/20210806150915.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Sharelist&#43;Rclone挂载阿里云盘和onedrive的保姆级教程</title>
      <link>http://localhost:1313/posts/sharelist&#43;rclone%E6%8C%82%E8%BD%BD%E9%98%BF%E9%87%8C%E4%BA%91%E7%9B%98%E5%92%8Conedrive%E7%9A%84%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8B/</link>
      <pubDate>Mon, 09 Aug 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/sharelist&#43;rclone%E6%8C%82%E8%BD%BD%E9%98%BF%E9%87%8C%E4%BA%91%E7%9B%98%E5%92%8Conedrive%E7%9A%84%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8B/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;基于 sharelist，挂载阿里云盘，onedrive，google drive 等，搭建私人不限速网盘。&lt;strong&gt;文章末尾有 microsoft 5 T 子号相送&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;[toc]&lt;/p&gt;&#xA;&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;&#xA;&lt;p&gt;自己平常看到有优惠活动，就申请了许多的网盘，有 onedrive，google drive，aliyunpan，teambition，蓝奏云等。就挺多的，但是也没有好好的利用，单单是阿里云就能有 10 T 的空间。因为存在以下问题：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;每次要下载个文件什么的，都需要登录客户端，然后下载，也用不了我的 aria 2 或者 IDM，虽然速度确实是跑满的，但是这么多网盘，使用体验确实没有那么好。&lt;/li&gt;&#xA;&lt;li&gt;而且，有时候想发一些文件给别人，一时间也找不到好的方式，只能通过 QQ 微信发送，很麻烦。&lt;/li&gt;&#xA;&lt;li&gt;自己网盘的空间得不到充分的利用，闲置很多&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;于是乎，就有了拿这些网盘，挂载到一起，做一个大的网盘的想法。搜了网上的一些资料，有个很好用的软件 &lt;a href=&#34;https://rclone.org/&#34;&gt;Rclone&lt;/a&gt;, 还有 &lt;a href=&#34;https://github.com/reruin/sharelist&#34;&gt;sharelist&lt;/a&gt;, 前者可以将 onedrive、google drive、dropbox 等的挂载为本地磁盘，后者拥有设计精美的前端页面和后台管理系统，可拓展性强，搜寻资料，历经千难万险，终于摸索出了挂载这些网盘到前端页面的教程，使用方便，上传下载都很方便。&lt;/p&gt;&#xA;&lt;p&gt;本套教程包括了：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;sharelist 挂载阿里云盘&lt;/li&gt;&#xA;&lt;li&gt;rclone 挂载 onedrive 到 linux 硬盘&lt;/li&gt;&#xA;&lt;li&gt;sharelist 挂载本地硬盘&lt;/li&gt;&#xA;&lt;li&gt;持续更新&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;最终效果：&lt;/p&gt;&#xA;&lt;p&gt;网址: &lt;a href=&#34;https://pan.i52.me&#34;&gt;https://pan.i52.me&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image.ooapex.com/images/20210809162412.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;宝塔面板安装&#34;&gt;宝塔面板安装&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;其实，只要你足够熟悉 nginx 的相关配置命令，是不需要安装宝塔面板的。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Centos安装脚本:yum install -y wget &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sh install.sh&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Ubuntu/Deepin安装脚本: wget -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo bash install.sh&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Debian安装脚本: wget -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; bash install.sh&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Fedora安装脚本: wget -O install.sh http://download.bt.cn/install/install_6.0.sh &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; bash install.sh&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后就等着就行了，等到脚本执行完出现了访问链接和密码，点击链接进入浏览器，就能够看到宝塔的登录面板了，默认安装 lnmp 运行环境，主要要用的就是个 nginx，如果不安装这些环境也无伤大雅。&lt;/p&gt;</description>
    </item>
    <item>
      <title>新网免实名认证白嫖三个顶级域名</title>
      <link>http://localhost:1313/posts/%E6%96%B0%E7%BD%91%E5%85%8D%E5%AE%9E%E5%90%8D%E8%AE%A4%E8%AF%81%E7%99%BD%E5%AB%96%E4%B8%89%E4%B8%AA%E9%A1%B6%E7%BA%A7%E5%9F%9F%E5%90%8D/</link>
      <pubDate>Fri, 06 Aug 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/%E6%96%B0%E7%BD%91%E5%85%8D%E5%AE%9E%E5%90%8D%E8%AE%A4%E8%AF%81%E7%99%BD%E5%AB%96%E4%B8%89%E4%B8%AA%E9%A1%B6%E7%BA%A7%E5%9F%9F%E5%90%8D/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;新网 28 周年，免费领域名和虚拟主机&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;PS: 2021-08-20, 经评论小伙伴提醒，现在可以免费领取 7 个顶级域名了&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;活动介绍&#34;&gt;活动介绍&lt;/h1&gt;&#xA;&lt;p&gt;新网 (xinnet) 是国内的老牌主机商，提供域名和主机服务。本次活动，可以低价注册 &lt;code&gt;.com .com.cn&lt;/code&gt; 等域名，更可以白嫖 &lt;code&gt;.xyz .ltd .fun&lt;/code&gt; 等英文顶级域名，还能够免费领取 3 个月的免费主机，和低价的主机体验套餐。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image.ooapex.com/images/20210806211208.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.xinnet.com/composite/zt/2021zhounianqing.html?utm_source=dn&amp;amp;utm_medium=sns&#34;&gt;活动地址&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;域名注册-绕过新网实名&#34;&gt;域名注册-绕过新网实名&lt;/h1&gt;&#xA;&lt;p&gt;由于新网注册域名之后是需要实名的，我个人觉得实名信息太多了，有点麻烦。而且我刚注册新网就有人给我打电话，推销他们的产品，优点让人烦躁，于是乎我就想办法看看能不能先绕过实名，不走新网的实名认证。&lt;/p&gt;&#xA;&lt;h2 id=&#34;领券--非常重要&#34;&gt;领券&amp;ndash;非常重要&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;注意，一定要先把所有的券都领完，再去体验域名套餐和主机套餐！！！&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;注意，一定要先把所有的券都领完，再去体验域名套餐和主机套餐！！！&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;注意，一定要先把所有的券都领完，再去体验域名套餐和主机套餐！！！&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;因为一旦你使用了一个优惠券，那么你就不再是新用户的身份了，就不能够再去领取他们活动的优惠券了（血的教训）&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image.ooapex.com/images/20210806220334.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image.ooapex.com/images/20210806220319.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;把所有的券都领完以后，就可以开始搜索注册域名啦，比如我搜索的是 flydua, 那么下面的这三个顶级域名都是有优惠券，可以免费购买到手的。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image.ooapex.com/images/20210806212042.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;购买--注意修改-dns&#34;&gt;购买&amp;ndash;注意修改 DNS&lt;/h2&gt;&#xA;&lt;p&gt;为什么要修改 DNS 呢，因为新网在你购买好域名以后，想要对域名进行任何操作都需要对域名进行实名认证，所以等到注册完了再修改是不可行的，那么就只能在购买阶段指定解析的 DNS。&lt;/p&gt;&#xA;&lt;p&gt;上面的点击加入购物车，可以都选，也可以只选一个，点击查询按钮旁边的购物车进入购物车。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image.ooapex.com/images/20210806212500.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;直接点击去结算，下一步的界面就要小心啦，别点快了，因为我们要用的修改 DNS 就在这个页面的最下面&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image.ooapex.com/images/20210806212534.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;选择其他的 DNS 服务器，&lt;strong&gt;将服务器的 DNS 设置为 Cloudflare 的 dns. 那么 cloudflare 的 dns 名称服务器到底是多少呢，每个人的每个账号都是不相同的，需要个人先注册账号，然后随便选一个自己的域名托管到自己的 CF，如果大家手上没有域名的话，我这边有一些不用的域名可以借给大家，大家解析一下再删除站点就行了。&lt;/strong&gt;（这里很重要，因为一旦新网购买的时候制定了，没有实名认证是不能修改的，如果你实名认证的话当我没说）。注意一定要事先知道 CF 给自己分配的名称服务器。（血的教训 2）&lt;/p&gt;&#xA;&lt;p&gt;CF 的注册入口&lt;a href=&#34;https://dash.cloudflare.com/sign-up&#34;&gt;注册地址&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;我的名称服务器是&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dolly.ns.cloudflare.com&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nick.ns.cloudflare.com&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你们最终得到的应该也是跟这个类似的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>CloudFlare解析域名到HerokuApp</title>
      <link>http://localhost:1313/posts/cloudflare%E8%A7%A3%E6%9E%90%E5%9F%9F%E5%90%8D%E5%88%B0herokuapp/</link>
      <pubDate>Thu, 05 Aug 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/cloudflare%E8%A7%A3%E6%9E%90%E5%9F%9F%E5%90%8D%E5%88%B0herokuapp/</guid>
      <description>&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;&#xA;&lt;h2 id=&#34;cloudflarehttpsdashcloudflarecom--web-performance--security&#34;&gt;&lt;a href=&#34;https://dash.cloudflare.com/&#34;&gt;CloudFlare&lt;/a&gt; -Web Performance &amp;amp; Security&lt;/h2&gt;&#xA;&lt;p&gt;不得不说，Cloudflare (以下简称 CF) 解析域名是真的方便，我把所有的域名都托管到 CF，然后可以在 CF 上统一管理，统一解析，用起来还是很舒服的。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image.ooapex.com/images/20210805100337.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;CF 似乎还提供免费的 SSL（是啥我也不知道，后面会了解一下，写个博客），那样我们的网站就有了一个小🔒，能够防止攻击什么的。CloudFlare 能够完全托管我们的域名，免费的计划我觉得已经够我使用了，能够在看到域名的访问信息，缓存信息等，吹爆。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image.ooapex.com/images/20210805100643.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;herokuhttpsdashboardherokucom--云应用平台&#34;&gt;&lt;a href=&#34;https://dashboard.heroku.com/&#34;&gt;Heroku&lt;/a&gt; -云应用平台&lt;/h2&gt;&#xA;&lt;p&gt;Heroku 是我前两年注册的一个平台，当时还验证了卡，想着免费也没什么用，就一直放着没动，前两天折腾 VPS 的时候，逛 GitHub 发现了有一些应用可以一键部署到 Heroku 上，想着这么方便，我就试一试呗，然后就有了以下的两个网站&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://blog.i52.me/&#34;&gt;小木屋书笺&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://faka.i52.me/#/&#34;&gt;发卡网&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;前一个是基于 Ghost 搭建的博客网站，后面一个是一个博客网站，以后有什么可以卖的时候再完善一下发卡网站叭。&lt;/p&gt;&#xA;&lt;p&gt;总的来说，一个 heroku 账号，如果不绑卡验证，所有应用加起来每个月可以有 550 小时的运行时间，大约全天 24 小时不间断可以运行 21 天，如果验证了卡，每个月会再加上 450 小时的运行时间，也就是总共有 1000 小时的运行时间，折合 41 天。然后 heroku 还有一个很特别的机制，就是为了防止滥用，应用长时间没有访问的话，会进入休眠，不计算相应的运行时间，时间上还是够够的。&lt;/p&gt;&#xA;&lt;p&gt;博客应用还是常驻的好，后面想办法能不能保证应用不自动休眠且自己也尝试写个 heroku 部署脚本出来😄&lt;/p&gt;&#xA;&lt;h1 id=&#34;域名解析&#34;&gt;域名解析&lt;/h1&gt;&#xA;&lt;p&gt;Heroku 应用自带域名解析配置，提供两种方法将托管于 CF 的域名解析到 Heroku。&lt;/p&gt;&#xA;&lt;h2 id=&#34;直接解析到-heroku-分配的域名上&#34;&gt;直接解析到 Heroku 分配的域名上&lt;/h2&gt;&#xA;&lt;p&gt;一般新建好 App 以后，heroku 会自动给你分配一个域名，类似于 &lt;code&gt;appname.herokuapp.com&lt;/code&gt;, 其中的 &lt;code&gt;appname&lt;/code&gt; 就是你创建 app 时指定的名字，第一种解析方法就是再 cf 上的 dns 解析下，添加记录&lt;/p&gt;</description>
    </item>
    <item>
      <title>卷积神经网络(CNN)-什么是卷积运算</title>
      <link>http://localhost:1313/posts/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9Ccnn-%E4%BB%80%E4%B9%88%E6%98%AF%E5%8D%B7%E7%A7%AF%E8%BF%90%E7%AE%97/</link>
      <pubDate>Thu, 05 Aug 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9Ccnn-%E4%BB%80%E4%B9%88%E6%98%AF%E5%8D%B7%E7%A7%AF%E8%BF%90%E7%AE%97/</guid>
      <description>&lt;h1 id=&#34;卷积计算的来源&#34;&gt;卷积计算的来源&lt;/h1&gt;&#xA;&lt;p&gt;想象这么一个例子，有一些图片，我们要判断这些图片中含不含有猫。如果用基本的神经网络做二分类（logistics regression）的话，当以一张&lt;code&gt;64x64x3&lt;/code&gt;的图片作为输入进行神经网络运算时，其输入端总共有12288个输入，当神经网络只有一层，且这一层有1000个节点时，那么对于这个神经网络，连接输入与神经网络节点之间的的权值矩阵将是一个（1000，12288）的矩阵，也就是有&lt;code&gt;12,288,000&lt;/code&gt;个参数需要确定，也就是1000万左右，这还仅仅是一张1.5k左右的图片，进行训练的时候就需要确定1000万个参数，如果图片再大一点，&lt;code&gt;1000*1000*3&lt;/code&gt;的话（366K），那么需要确定的参数将达到3亿个。这么多的参数，就会带来两个问题：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;神经网络训练困难&lt;/li&gt;&#xA;&lt;li&gt;容易出现过拟合&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;为了解决这种类型的问题，不得不寻找新的计算方法来应对计算机视觉中的图像处理问题，也就有了&lt;strong&gt;卷积运算&lt;/strong&gt;。&lt;br&gt;&#xA;&lt;img src=&#34;https://image.ooapex.com/images/20210805155718.png&#34; alt=&#34;常规神经网络的参数量&#34;&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;卷积运算2维卷积为例&#34;&gt;卷积运算(2维卷积为例)&lt;/h1&gt;&#xA;&lt;h2 id=&#34;卷积定义convolution&#34;&gt;卷积定义(Convolution)&lt;/h2&gt;&#xA;&lt;p&gt;在泛函分析中，**卷积、旋积或褶积(英语：Convolution)**是通过两个函数f和g生成第三个函数的一种数学算子，表征函数f与g经过翻转和平移的重叠部分函数值乘积对重叠长度的积分。 如果将参加卷积的一个函数看作区间的指示函数，卷积还可以被看作是“滑动平均”的推广。卷积是一种特殊的线性操作。卷积网络是一种特殊的神经网络，它们在至少一个层中使用卷积代替一般矩阵乘法。&lt;/p&gt;&#xA;&lt;h2 id=&#34;卷积核与过滤矩阵kernel--filter&#34;&gt;卷积核与过滤矩阵(kernel &amp;amp; Filter)&lt;/h2&gt;&#xA;&lt;p&gt;卷积核就是&lt;strong&gt;权重矩阵&lt;/strong&gt;，只不过是确定大小的权重矩阵。多个卷积核线性连接在一起，也就变成了过滤矩阵，一般来说，一个二维的卷积核，线性相连在一起就变成了一个三维的矩阵，也就是说过滤矩阵的3D的，所以，Filter总是要比Kernel多一层。卷积核的作用就是从图像中提取出某些特征，比如提出图片的横向边缘，纵向边缘，或者任意角度的边缘检测。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/87763131&#34;&gt;卷积核和过滤矩阵科普博客&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;与基本的神经网络不同，卷积运算可以说已经指定了运算法则，也就是制定了权重矩阵，而来训练一个&lt;strong&gt;过滤器矩阵&lt;/strong&gt;，完成卷积运算。&lt;/p&gt;&#xA;&lt;h2 id=&#34;进行卷积运算&#34;&gt;进行卷积运算&lt;/h2&gt;&#xA;&lt;p&gt;卷积运算就是将原始的输入矩阵与卷积核按照一定的规则相乘，规则如下：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;将卷积核与输入矩阵一一匹配，并做相乘相加运算，放到生成矩阵的对应位置&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image.ooapex.com/images/20210805162731.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;比如说上图，从左上角开始，将整个filter与前面的6x6的矩阵对应上，对应位置的数做相乘运算，然后相加起来，放到第一个位置。也就是&lt;br&gt;&#xA;3&lt;em&gt;1+1&lt;/em&gt;2+2&lt;em&gt;1+0&lt;/em&gt;0+0&lt;em&gt;5+0&lt;/em&gt;7+1*(-1)+8*(-1)+2*(-1)=-5&lt;br&gt;&#xA;填入第一个空缺。&lt;/p&gt;&#xA;&lt;ol start=&#34;2&#34;&gt;&#xA;&lt;li&gt;将卷积核往右移动一个单位，继续做相同的运算，将运算得到的结果填入第二个空缺&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image.ooapex.com/images/20210805163222.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;ol start=&#34;3&#34;&gt;&#xA;&lt;li&gt;依次向后移动，当移动到最后石，回过头来往下移动一个格子，从左到右依次的做&lt;strong&gt;卷积运算&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image.ooapex.com/images/20210805163414.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;ol start=&#34;4&#34;&gt;&#xA;&lt;li&gt;直到后面的4x4的矩阵完全填满，那么一次卷积运算也就做完了。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image.ooapex.com/images/20210805163551.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;生成矩阵的维度确定&#34;&gt;生成矩阵的维度确定&lt;/h2&gt;&#xA;&lt;p&gt;在输入矩阵和卷积核都确定的情况下，最终卷积的结果也是确定的，结果的维度为 输入矩阵维度n-过滤矩阵维度f + 1&lt;br&gt;&#xA;n2 = n1 - f + 1&lt;br&gt;&#xA;如上面的输出矩阵的维度为 6 -3 + 1 = 4&lt;/p&gt;&#xA;&lt;h1 id=&#34;padding&#34;&gt;Padding&lt;/h1&gt;&#xA;&lt;p&gt;在进行卷积运算时，每次卷积过后，整个矩阵会变小，久而久之&lt;strong&gt;整个矩阵会变得很小&lt;/strong&gt;。而且位于左上角的数字3只参与了一次卷积运算，而位于中间的数字2则进行了多次卷积运算，也就是影响多个卷积结果。这样会让图片的边缘信息得不到充分的挖掘与利用，于是就有了在输入矩阵周围拓展一些空白的像素点，使得边缘的信息能够充分利用。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://image.ooapex.com/images/20210805172104.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;上图中蓝色的部分就是添加的padding，这样可以保证，边缘的信息能够得到充分的利用，而且输出的矩阵的大小可以得到控制。更进一步，&lt;strong&gt;可以通过控制padding的大小，使得输入矩阵和输入矩阵的大小维度是一致的。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;令：n+2p - f + 1 = n&lt;br&gt;&#xA;解得: p = (f-1)/2&lt;br&gt;&#xA;如上图p=1，则有 6+2*1-3+1=6&lt;/p&gt;&#xA;&lt;p&gt;根据padding大小的不同，可以将卷积分为&lt;strong&gt;Valid Convolution&lt;/strong&gt; 和&lt;strong&gt;Same Convolution&lt;/strong&gt;两大类，显而易见，前者就叫空白卷积，不添加任何padding，后者叫相同卷积，也就是保证卷积后的矩阵大小与卷积前的矩阵大小保持一致。&lt;/p&gt;&#xA;&lt;h1 id=&#34;卷积步长strided-convolution&#34;&gt;卷积步长（Strided Convolution）&lt;/h1&gt;&#xA;&lt;p&gt;在前面的例子中，每次都是向右移动一个单位，而步长就是用来控制移动几个单位的。比如步长为2，那么在进行卷积运算时，当第一个矩阵部分运算完毕，就向右移动两格子，进行下一次运算。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Markdown写作个人图床配置-Gitee，SM.MS</title>
      <link>http://localhost:1313/posts/markdown%E5%86%99%E4%BD%9C%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A%E9%85%8D%E7%BD%AE-giteesm.ms/</link>
      <pubDate>Tue, 03 Aug 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/markdown%E5%86%99%E4%BD%9C%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A%E9%85%8D%E7%BD%AE-giteesm.ms/</guid>
      <description>&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;&#xA;&lt;p&gt;写作最重要的是资源，不像是古老的在本子上写作，或者是在本地写作，现如今的许多的服务都是托管到其他的服务平台上。就像是我的博客，是搭建在别人的虚拟主机上一样。万一哪一天我的主机服务商跑路了，那我的所有的资源将付之一炬，什么也不剩下了。&#xA;因此，是很有必要将自己的文字和插入的图片进行备份的，&lt;del&gt;虽然目前啥也没&lt;/del&gt;，但是，提早的做好预防总是不错的。&#xA;Wordpress 有自带的插件，可以定期备份（All in One WP Migration），我试了使用这个插件整体迁移，效果还是很不错的，几乎所有的配置（主题，文章，设置等），都可以顺利的迁移过来，使用体验很好。&#xA;但是，我目前使用的是虚拟主机，wordpress 是个一体化的写作软件，也就意味着所有的文章图片都是存储在我的这个虚拟主机上。虚拟主机提供的存储空间是有限的，随着时间的推移，我上传的图片啊或者媒体资源的变多，就会出现空间危机。&lt;del&gt;为了优雅的白嫖，那就开始自建图床吧&lt;/del&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;准备工作&#34;&gt;准备工作&lt;/h1&gt;&#xA;&lt;p&gt;虽然说是自建图床，其实就是利用大厂的资源罢了。看了许多的厂子的对象存储的价格，都很便宜，流量也不贵，但是心里总是有点虚。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;阿里云：最低 9 rmb/y, 40 G 的存储空间，下行流量 0.25 r/G&lt;/li&gt;&#xA;&lt;li&gt;腾讯云：注册免费送 60 G 存储空间，持续半年，半年后再续费&lt;/li&gt;&#xA;&lt;li&gt;又拍云：需要自己有备案的域名，望而却步，&lt;strong&gt;当然如果有了自己备案的域名，可以加入又拍云联盟，每个月有免费额度，十分够用&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;七牛云：业界评价很好，还是需要有备案域名，望而却步&lt;/li&gt;&#xA;&lt;li&gt;SM. MS：免费，有免费的 API，可以用一用&lt;/li&gt;&#xA;&lt;li&gt;GitHub：免费，做国外的博客应该可以吧，国内的就算了，访问堪忧&lt;/li&gt;&#xA;&lt;li&gt;Gitee：免费，国内访问速度很不戳，可以用一用&#xA;综上所述，为了优雅的白嫖还保证自己的图片的安全，选择了 Gitee 作为主要的存储池，选择 SM. MS 作为备用的。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h1 id=&#34;gitee-账号准备&#34;&gt;Gitee 账号准备&lt;/h1&gt;&#xA;&lt;h2 id=&#34;新建仓库&#34;&gt;新建仓库&lt;/h2&gt;&#xA;&lt;p&gt;首先注册 Gitee 账号，国内平台，使用手机号注册即可，然后就点击右上角新建仓库，仓库配置如下，&lt;strong&gt;注意要选择下面的新建 master 分支，这个比较主要&lt;/strong&gt;：&#xA;&lt;img src=&#34;https://image.ooapex.com/images/20210803170048.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;生成私人令牌&#34;&gt;生成私人令牌&lt;/h2&gt;&#xA;&lt;p&gt;私人令牌就是一段加密的代码，可以理解为一段私钥，可以让你不用登录 Gitee 就能够在命令行或者其他工具里面操作你的项目，十分的方便。&#xA;生成私人令牌的步骤如下：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;点击设置，找到私人令牌选项，点亿下&#xA;&lt;img src=&#34;https://image.ooapex.com/images/20210803170502.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;li&gt;点击生成新的令牌&#xA;&lt;img src=&#34;https://image.ooapex.com/images/20210803170615.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;li&gt;创建令牌，令牌描述随便写，下面的选项一般只选一个 project，看个人情况选择&#xA;&lt;img src=&#34;https://image.ooapex.com/images/20210803170810.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;复制生成的令牌或者保留页面&lt;/strong&gt;，一定要现场复制，因为这个 token 只会出现一次，所以当你离开页面以后，再想找就找不到了。只能重新再生成了。&#xA;&lt;img src=&#34;https://image.ooapex.com/images/20210803171120.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h1 id=&#34;picgo-准备&#34;&gt;PicGo 准备&lt;/h1&gt;&#xA;&lt;h2 id=&#34;软件下载&#34;&gt;软件下载&lt;/h2&gt;&#xA;&lt;p&gt;PicGo 是一个支持快捷上传图片到上述一些图床的软件，可以直接在 Github 上找到，去 release 页面下载相应的平台的对应的软件。&#xA;&lt;a href=&#34;http://https://github.com/Molunerfinn/PicGo/releases&#34; title=&#34;release&#34;&gt;release 页面&lt;/a&gt;&#xA;我是 windows，所以我选择的是以下版本&#xA;&lt;img src=&#34;https://image.ooapex.com/images/20210803171501.png&#34; alt=&#34;release版本&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>WordPress博客搭建</title>
      <link>http://localhost:1313/posts/wordpress%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Mon, 02 Aug 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/wordpress%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;折腾了许多的博客,有基于Notion的,基于Ghost的,也有自己用Python搭建的,最终都没有善终.前两天被Wordpress博客所圈粉,有一款主题是真好看(就是我现在的这款corepress),躁动的人终究需要安定下来.我也想着能够真正的找到一个满意的博客,去沉浸下来,去写作,这也是这篇博客的初衷.&amp;ndash;20210802&lt;/p&gt;&#xA;&lt;h2 id=&#34;下载wordpress&#34;&gt;下载Wordpress&lt;/h2&gt;&#xA;&lt;p&gt;话不多说,要安装,那就要先下载wordpress博客啦.可以直接百度搜索wordpress或者去Github下载最新的版本,博客建立之时,用的是5.8版本.&lt;/p&gt;&#xA;&lt;p&gt;可能有的读者下载比较慢,这里提供一些下载链接:&lt;/p&gt;&#xA;&lt;p&gt;[c-downbtn type=&amp;ldquo;github&amp;rdquo; url=&amp;ldquo;https://github.com/WordPress/WordPress/releases&amp;rdquo; pwd=&amp;quot;&amp;quot;]资源文件下载[/c-downbtn]&lt;/p&gt;&#xA;&lt;p&gt;[c-downbtn type=&amp;ldquo;al&amp;rdquo; url=&amp;ldquo;https://pan.i52.me/aliyun/BlogFile/WordPress-5.8.zip&amp;rdquo; pwd=&amp;quot;&amp;quot;]资源文件下载[/c-downbtn]&lt;/p&gt;&#xA;&lt;h2 id=&#34;搭建方案&#34;&gt;搭建方案&lt;/h2&gt;&#xA;&lt;h3 id=&#34;服务器搭建hard&#34;&gt;服务器搭建(Hard)&lt;/h3&gt;&#xA;&lt;p&gt;搭建自己的web网站,那肯定就需要一个主机呀.博主折腾过许久的服务器,国内的国外的,自己安装配置博客所需要的环境,自己创建数据库等.不得不说,这么做真的很磨练自己的水平.所以建议有时间和精力的读者,自己多多折腾一下服务器,在命令行完成依赖环境的安装和配置.&lt;/p&gt;&#xA;&lt;h3 id=&#34;虚拟主机搭建easy&#34;&gt;虚拟主机搭建(Easy)&lt;/h3&gt;&#xA;&lt;p&gt;当然,一个简单的网站,是可以直接在虚拟主机上搭建的,虚拟主机的好处就是不需要自己搭建许多的环境,主机服务商都给你安装好了配置好了,你只需要上去就是一通操作,一通上传配置就行了,不得不说十分的方便,但是也会存在一些小小的限制.&lt;/p&gt;&#xA;&lt;p&gt;以上的两种方法,都能够达到咱们的目标,为了操作简单,专注写作,那目前就选最简单的一种吧.&lt;/p&gt;&#xA;&lt;h2 id=&#34;虚拟主机&#34;&gt;虚拟主机&lt;/h2&gt;&#xA;&lt;p&gt;我用的是&lt;a href=&#34;https://idc.la&#34;&gt;云上萝莉&lt;/a&gt;的虚拟主机,创建于2018年,偶然的机会得知的,三周年的时候买了一台香港GIA,也就30软妹币一年,相对于服务器最低一年100,还是很划算的,闲置了半年,现在把它捡起来搭建博客.大家可以等一等有没有周年庆的活动啊啥的,都三四年了,官网的介绍说是不超售,我也不知道,我也不敢问.(找狗魔王要广告费去),目前的提供的主机有下面这些,大家看自己的情况自行挑选选购吧.&lt;/p&gt;&#xA;&lt;p&gt;购买好虚拟主机之后,就可以激活啦.(建议加这个主机服务商的群,直接问主机商的群主激活的相关问题,群里也有相关的教程视频)后面的配置什么的都在群里可以看到了.&lt;/p&gt;&#xA;&lt;h2 id=&#34;服务安装与配置&#34;&gt;服务安装与配置&lt;/h2&gt;&#xA;&lt;p&gt;由于有详尽的后勤人员,所以对与部署过程就不详细描述了,主要是以下几个主要的步骤.&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;自己买的域名解析到虚拟主机(激活时自己输入的域名)&lt;/li&gt;&#xA;&lt;li&gt;FTP连接你买的主机(账户密码在控制面板上都有,可以自己修改密码)&lt;/li&gt;&#xA;&lt;li&gt;上传wordpress压缩包并解压(主机控制面板自带)&lt;/li&gt;&#xA;&lt;li&gt;访问自己的域名,开始wordpress配置&lt;/li&gt;&#xA;&lt;li&gt;开始你的Blog吧~&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/about/</guid>
      <description>&lt;p&gt;&lt;strong&gt;关于我&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;你好！我是flytec，一名专注于软件开发与技术创新的工程师。我的技能范围广泛，涵盖了多种编程语言和技术栈，致力于构建高效、稳定且可扩展的系统。在过去的几年里，我积累了丰富的编程经验，尤其擅长Python、C/C++、Java、Go等编程语言，以及Web部署和QT框架的应用开发。&lt;/p&gt;&#xA;&lt;h3 id=&#34;技术专长&#34;&gt;技术专长&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Python&lt;/strong&gt;：我精通Python，能够使用它开发各类自动化脚本、数据分析工具、爬虫、机器学习模型等。在数据科学和人工智能方面，我也有一定的实践经验。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;C/C++&lt;/strong&gt;：我在C/C++方面有扎实的基础，能够高效地进行系统编程、性能优化以及嵌入式开发。对于复杂的底层操作和资源管理，我有深入的理解，能够开发出稳定和高性能的应用。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Java&lt;/strong&gt;：Java是我在企业级应用开发中的首选语言。无论是Spring框架下的微服务开发，还是大数据处理与分布式系统的构建，我都能游刃有余。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Go&lt;/strong&gt;：Go语言是我在构建高并发、高效能的后端服务时的主要工具。其简洁的语法和强大的并发能力使得我能轻松应对高负载系统的开发需求。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Web部署&lt;/strong&gt;：我具备全栈Web开发能力，能够从前端到后端，甚至部署与维护，独立完成整个项目。熟练掌握HTML、CSS、JavaScript以及React、Vue等前端框架，同时在后端方面，有丰富的Web服务开发经验，能够使用Node.js、Flask、Django等构建高效、安全的Web应用。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;QT框架&lt;/strong&gt;：在桌面应用开发方面，Qt框架是我常用的工具。我能够利用Qt创建跨平台的高性能GUI应用，尤其在图形界面、数据展示以及系统集成方面，有深入的实践经验。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;项目经验&#34;&gt;项目经验&lt;/h3&gt;&#xA;&lt;p&gt;在我的职业生涯中，我参与了多个不同领域的项目，包括但不限于：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;开发高性能的分布式系统，优化数据传输和处理流程，提高系统的并发处理能力。&lt;/li&gt;&#xA;&lt;li&gt;使用Python和Go进行自动化工具开发，实现高效的数据采集和处理。&lt;/li&gt;&#xA;&lt;li&gt;构建企业级Web应用，涉及微服务架构、数据库优化、安全加固等多个方面。&lt;/li&gt;&#xA;&lt;li&gt;使用Qt开发跨平台桌面应用，提升用户体验和界面交互效果。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;我的工作理念&#34;&gt;我的工作理念&lt;/h3&gt;&#xA;&lt;p&gt;我始终相信技术的核心是解决问题。无论是面对复杂的技术挑战，还是进行日常开发，我都以务实的态度、严谨的思维去应对。通过不断学习新技术和方法，我始终保持对技术的热情，力求在工作中不断突破自己的极限。&lt;/p&gt;&#xA;&lt;p&gt;我喜欢通过开源项目、参与技术社区和与同行交流来不断扩展自己的视野。未来，我希望能够在技术的道路上走得更远，创造更多有价值的产品和解决方案。&lt;/p&gt;&#xA;&lt;h3 id=&#34;联系我&#34;&gt;联系我&lt;/h3&gt;&#xA;&lt;p&gt;如果你对我的背景或技术能力感兴趣，或者有任何项目合作的机会，欢迎随时联系我！我期待与你一起探讨技术，解决问题，创造更美好的未来。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;mail: &lt;a href=&#34;mailto:flytech188@gmail.com&#34;&gt;flytech188@gmail.com&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
  </channel>
</rss>
